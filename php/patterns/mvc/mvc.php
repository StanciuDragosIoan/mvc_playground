<?php

    /*
        The Model-View-Control (MVC) pattern, originally formulated in the late 1970s, is a software architecture 
        pattern built on the basis of keeping the presentation of data separate from the methods that interact with 
        the data. In theory, a well-developed MVC system should allow a front-end developer and a back-end developer 
        to work on the same system without interfering, sharing, or editing files either party is working on.


        Even though MVC was originally designed for personal computing, it has been adapted and is widely used by web developers due to its 
        emphasis on separation of concerns, and thus indirectly, reusable code. The pattern encourages the development of modular systems, 
        allowing developers to quickly update, add, or even remove functionality.

        Model

            The Model is the name given to the permanent storage of the data used in the overall design. It must allow access for the 
            data to be viewed, or collected and written to, and is the bridge between the View component and the Controller component 
            in the overall pattern.

            its sole purpose is to process data into its permanent storage or seek and prepare data to be passed along to the other parts

            it is the most complex part of the MVC system, the Model component is also the pinnacle of the whole system since without it 
            there isn’t a connection between the Controller and the View


        View

            The View is where data, requested from the Model, is viewed and its final output is determined. Traditionally in web apps 
            built using MVC, the View is the part of the system where the HTML is generated and displayed. The View also ignites reactions 
            from the user, who then goes on to interact with the Controller. The basic example of this is a button generated by a View, 
            which a user clicks and triggers an action in the Controller.


        Controller

            The final component of the triad is the Controller. Its job is to handle data that the user inputs or submits, 
            and update the Model accordingly. The Controller’s life blood is the user; without user interactions, the Controller 
            has no purpose. It is the only part of the pattern the user should be interacting with.

            The Controller can be summed up simply as a collector of information, which then passes it on to the Model to be organized 
            for storage, and does not contain any logic other than that needed to collect the input. The Controller is also only connected 
            to a single View and to a single Model, making it a one way data flow system, with handshakes and signoffs at each point of data exchange.


            https://www.sitepoint.com/the-mvc-pattern-and-php-1/

            https://www.sitepoint.com/the-mvc-pattern-and-php-2/

    */


    //sample implement

    /*
class Model
{
    public $string;

    public function __construct(){
        $this->string = "MVC + PHP = Awesome!";
    }
}


class View
{
    private $model;
    private $controller;

    public function __construct($controller,$model) {
        $this->controller = $controller;
        $this->model = $model;
    }
	
    public function output(){
        return "<p>" . $this->model->string . "</p>";
    }
}


class Controller
{
    private $model;

    public function __construct($model) {
        $this->model = $model;
    }
}


$model = new Model();
$controller = new Controller($model);
$view = new View($controller, $model);
echo $view->output();

*/

    //own implement


    //manipulates data
    class Model
    {
        private $data;

        public function __construct($data)
        {
            $this->data = $data;
        }

        public function getData()
        {
            return $this->data;
        }

        public function setData($updatedData)
        {
            $this->data = $updatedData;
        }

    }

    //renders data (received from controller)
    class View
    {
         private $viewData = 'default view data';

         public function setViewData($newViewData)
         {
            $this->viewData = $newViewData;
         }

         public function view()
         {  
             return $this->viewData;
              
         }

         
    }


    //tells the Model to manipulate data
    class Controller
    {   
        private $model;
        

        public function __construct($model)
        {
            $this->model = $model;
     
        }

        public function updateModelData($newData){
            $this->model->setData($newData);
        }
    }

    $model = new Model('test data');

 

    $controller = new Controller($model);
    $controller->updateModelData('update data');

    $view = new View();

    echo $view->view();
   


   